"""
Django settings for group_playlist_generator project.

Generated by 'django-admin startproject' using Django 1.8.2.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '9&kg4snph4_l8*b)wg*v$ujdzyic#wr3+k&13y=hii9!u@!@^p'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken',
    'rest_auth',
    'client',
    'spotify',
    'social.apps.django_app.default',
)

MIDDLEWARE_CLASSES = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
)

ROOT_URLCONF = 'group_playlist_generator.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'social.apps.django_app.context_processors.backends',
                'social.apps.django_app.context_processors.login_redirect',
            ],
        },
    },
]



WSGI_APPLICATION = 'group_playlist_generator.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases

# Databases for Elastic Beanstalk Deployment
if 'RDS_DB_NAME' in os.environ:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql_psycopg2',
            'NAME': os.environ['RDS_DB_NAME'],
            'USER': os.environ['RDS_USERNAME'],
            'PASSWORD': os.environ['RDS_PASSWORD'],
            'HOST': os.environ['RDS_HOSTNAME'],
            'PORT': os.environ['RDS_PORT'],
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql_psycopg2',
            'NAME': 'group_playlist_generator',
        }
    }

# Databases for EC2 Deployment
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql_psycopg2',
#         'NAME': '<DB Name>',
#         'HOST': 'localhost',
#         'USER': '<DB User>',
#         'PASSWORD': '<DB Password>'
#     }
# }


# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

AUTHENTICATION_BACKENDS = (
    'social.backends.spotify.SpotifyOAuth2',
    'django.contrib.auth.backends.ModelBackend',
)

# spotify client id
SOCIAL_AUTH_SPOTIFY_KEY = '4e92c02ac661441e8177ed1d20f0a2c3'
# spotify client secret
SOCIAL_AUTH_SPOTIFY_SECRET = 'ada92ccd1e844c20956e13ca94d12cda'

SOCIAL_AUTH_URL_NAMESPACE = 'social'

SOCIAL_AUTH_ADMIN_USER_SEARCH_FIELDS = ['username', 'first_name', 'email']

# Python Social Auth Settings
SOCIAL_AUTH_AUTHENTICATION_BACKENDS = (
    'social.backends.spotify.SpotifyOAuth2',
)

SOCIAL_AUTH_LOGIN_REDIRECT_URL = '/#/'

SOCIAL_AUTH_DISCONNECT_REDIRECT_URL = '/foo'

SPOTIFY_AUTH_EXTRA_ARGUMENTS = {'state': '1h2g3g4j5gh6f3et3g'}

SOCIAL_AUTH_SPOTIFY_IGNORE_DEFAULT_SCOPE = True
SOCIAL_AUTH_SPOTIFY_SCOPE = [
    'playlist-read-private',
    'streaming',
    'user-read-private',
    'user-read-email',
]

# SOCIAL_AUTH_LOGIN_REDIRECT_URL = '/logged-in/'
# #Used to redirect the user once the auth process ended successfully. The value of ?next=/foo is used if it was present
#
# SOCIAL_AUTH_LOGIN_ERROR_URL = '/login-error/'
# #URL where the user will be redirected in case of an error
#
# SOCIAL_AUTH_LOGIN_URL = '/login-url/'
# #Is used as a fallback for LOGIN_ERROR_URL
#
# SOCIAL_AUTH_NEW_USER_REDIRECT_URL = '/new-users-redirect-url/'
# #Used to redirect new registered users, will be used in place of SOCIAL_AUTH_LOGIN_REDIRECT_URL if defined.
#
# SOCIAL_AUTH_NEW_ASSOCIATION_REDIRECT_URL = '/new-association-redirect-url/'
# #Like SOCIAL_AUTH_NEW_USER_REDIRECT_URL but for new associated accounts (user is already logged in). Used in place of SOCIAL_AUTH_LOGIN_REDIRECT_URL
#
# SOCIAL_AUTH_DISCONNECT_REDIRECT_URL = '/account-disconnected-redirect-url/'
# #The user will be redirected to this URL when a social account is disconnected
#
# SOCIAL_AUTH_INACTIVE_USER_URL = '/inactive-user/'
# #Inactive users can be redirected to this URL when trying to authenticate.

# http://psa.matiasaguirre.net/docs/configuration/django.html
SOCIAL_AUTH_ADMIN_USER_SEARCH_FIELDS = ['username', 'first_name', 'email']

# TODO Do I need this?
# SOCIAL_AUTH_UID_LENGTH = 223
# SOCIAL_AUTH_NONCE_SERVER_URL_LENGTH = 100
# SOCIAL_AUTH_ASSOCIATION_SERVER_URL_LENGTH = 100

# # TODO Do I need this?
# SPOTIFY_AUTH_EXTRA_ARGUMENTS = {
#       'response_type': 'code',
#       'client_id': SOCIAL_AUTH_SPOTIFY_KEY,
#       'scope': 'user-read-private user-read-email',
#       'redirect_uri': SOCIAL_AUTH_LOGIN_REDIRECT_URL,
# }

SOCIAL_AUTH_PIPELINE = (
    #attempting to introspect the pipline
    # Get the information we can about the user and return it in a simple
    # format to create the user instance later. On some cases the details are
    # already part of the auth response from the provider, but sometimes this
    # could hit a provider API.
    'social.pipeline.social_auth.social_details',

    # Get the social uid from whichever service we're authing thru. The uid is
    # the unique identifier of the given user in the provider.
    'social.pipeline.social_auth.social_uid',

    # Verifies that the current auth process is valid within the current
    # project, this is were emails and domains whitelists are applied (if
    # defined).
    'social.pipeline.social_auth.auth_allowed',

    # Checks if the current social-account is already associated in the site.
    'social.pipeline.social_auth.social_user',

    # Make up a username for this person, appends a random string at the end if
    # there's any collision.
    'social.pipeline.user.get_username',

    # Send a validation email to the user to verify its email address.
    # Disabled by default.
    # 'social.pipeline.mail.mail_validation',

    # Associates the current social details with another user account with
    # a similar email address. Disabled by default.
    # 'social.pipeline.social_auth.associate_by_email',

    # add the access key aka state to the kwargs that get set to user in create user func
    'spotify.pipeline.get_state',


    # Create a user account if we haven't found one yet.
    'social.pipeline.user.create_user',

    # Create the record that associated the social account with this user.
    'social.pipeline.social_auth.associate_user',

    # Populate the extra_data field in the social record with the values
    # specified by settings (and the default ones like access_token, etc).
    'social.pipeline.social_auth.load_extra_data',

    # Update the user record with any changed info from the auth service.
    'social.pipeline.user.user_details',


)

try:
    from local_settings import *
except ImportError:
    pass